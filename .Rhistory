rownames(results) <- c(classes, "accuracy", "macro avg", "weighted avg")
return(results)
}
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/variable_selection.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/preprocessing.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/private_methods.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/students.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/training.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/utils.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/visualization.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/evaluate.R")
devtools::document()
devtools::document()
devtools::document()
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
devtools::document()
test_check("mnlmixte")
source("C:/Users/lcisse/Desktop/mixlogit/tests/testthat.R")
library("mixlogilt")
library(mnlmixte)
library("mixlogit")
help(mixlogit)
library(mnlmixte)
help(mnlixte)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/evaluate.R")
library(mnlmixte)
help(mnlmixte)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
mnlmixte-Ex.R
library(mnlmixte)
mnlmixte-Ex.R
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
Error in initialize(...) : unused argument (use_parallel = FALSE
usethis::use_testthat()
usethis::use_test()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
source("C:/Users/lcisse/Desktop/mixlogit/tests/testthat.R")
Roxygen: list(markdown = TRUE)
install.packages("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_data(students, overwrite = TRUE)
devtools::document()
devtools::document()
install.packages(c("FactoMineR", "foreach", "doParallel", "pROC", "caret"))
help(mnlmixte)
devtools::load_all()
library(mnlmixte)
help("MNLMIXTE")
help(mnlmixte)
library(R6)
library(FactoMineR)
library(parallel)
library(pmml)
library(readr)    # Lecture des fichiers CSV
library(caret)
# Charger les données
students <- read_delim("sample.csv", delim = ";", show_col_types = FALSE)
# Charger les données
students <- read_delim("students.csv", delim = ";", show_col_types = FALSE)
save(students, file = "students.rda")
library(mnlmixte)
data(students)
data(score)
pkgload::dev_help('MNLMIXTE')
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
pkgload::dev_help('MNLMIXTE')
source("~/.active-rstudio-document")
# Chargement de votre package
library(mnlmixte)
# Chargement de votre package
library(mnlmixte)
# Charger le jeu de données 'students'
data(students)
# Préparation des données
# Supposons que 'Target' est la colonne cible et le reste sont des prédicteurs
X <- students[, !(colnames(students) %in% "Target")]  # Features
y <- as.factor(students$Target)  # Target
# Vérifier la structure des données
str(X)
str(y)
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Chargement de votre package
library(mnlmixte)
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
library(R6)
MNLMIXTE <- R6::R6Class(
"MNLMIXTE",
public = list(
learning_rate = NULL,
epochs = NULL,
initialize = function(learning_rate = 0.01, epochs = 1000) {
self$learning_rate <- learning_rate
self$epochs <- epochs
}
)
)
# Test
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000)
print(model)
remove.packages("mnlmixte")
library(mnlmixte)
View(model)
# Chargement de votre package
library(mnlmixte)
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Charger le jeu de données 'students'
data(students)
# Préparation des données
# Supposons que 'Target' est la colonne cible et le reste sont des prédicteurs
X <- students[, !(colnames(students) %in% "Target")]  # Features
y <- as.factor(students$Target)  # Target
# Vérifier la structure des données
str(X)
str(y)
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X, y)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Charger le jeu de données 'students'
data(students)
# Préparation des données
# Supposons que 'Target' est la colonne cible et le reste sont des prédicteurs
X <- students[, !(colnames(students) %in% "Target")]  # Features
y <- as.factor(students$Target)  # Target
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Charger le jeu de données 'students'
data(students)
# Préparation des données
# Supposons que 'Target' est la colonne cible et le reste sont des prédicteurs
X <- students[, !(colnames(students) %in% "Target")]  # Features
y <- as.factor(students$Target)  # Targe
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Charger le jeu de données 'students'
data(students)
# Préparation des données
# Supposons que 'Target' est la colonne cible et le reste sont des prédicteurs
X <- students[, !(colnames(students) %in% "Target")]  # Features
y <- as.factor(students$Target)  # Target
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X, y)
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Charger le jeu de données 'students'
data(students)
# Préparation des données
# Supposons que 'Target' est la colonne cible et le reste sont des prédicteurs
X <- students[, !(colnames(students) %in% "Target")]  # Caractéristiques
y <- as.factor(students$Target)  # Cible
# Diviser les données en ensembles d'entraînement et de test (70% train, 30% test)
set.seed(123)  # Pour la reproductibilité
train_indices <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X_train, y_train)
# Vérifier la structure des données
str(X)
str(y)
print(dim(X_train))  # Devrait afficher les dimensions (n, p)
print(length(y_train))  # Devrait afficher n
source("~/.active-rstudio-document")
print(dim(X_train))  # Devrait afficher les dimensions (n, p)
print(length(y_train))  # Devrait afficher n
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X_train, y_train)
source("~/.active-rstudio-document")
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X_train, y_train)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
if (is.null(X) || is.null(y)) stop("X or y is NULL.")
print(dim(X))  # Should output the dimensions of X (e.g., 100 x 5)
print(length(y))
source("C:/Users/lcisse/Desktop/mixlogit/R/training.R")
source("~/.active-rstudio-document")
str(X)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Make predictions
predictions <- model$predict(X)
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("~/.active-rstudio-document")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
library(mnlmixte)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
View(model)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Targe
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Make predictions
predictions <- model$predict(X)
probabilities <- model$predict_proba(X)
# Evaluate the model
evaluation <- model$evaluate(X, y)
source("~/.active-rstudio-document")
library(mnlmixte)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Make predictions
predictions <- model$predict(X)
probabilities <- model$predict_proba(X)
# Evaluate the model
evaluation <- model$evaluate(X, y)
print(evaluation)
# Plot training loss
model$plot_loss()
# Plot variable importance
model$plot_importance()
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("~/.active-rstudio-document")
library(mnlmixte)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = TRUE)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
library(MNLMIXTE)
library(mnlmixte)
# l'aide
?MNLMIXTE
# Load the Iris dataset
data(iris)
# Prepare the data
set.seed(123) # For reproducibility
iris$Target <- as.factor(ifelse(iris$Species == "setosa", "setosa", "other"))
X <- iris[, !(colnames(iris) %in% c("Species", "Target"))]
y <- iris$Target
# Split into training and testing sets
train_idx <- sample(1:nrow(iris), size = 0.7 * nrow(iris))
X_train <- X[train_idx, ]
y_train <- y[train_idx]
X_test <- X[-train_idx, ]
y_test <- y[-train_idx]
# Initialize the MNLMIXTE class
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 200, regularization = 0.01)
cat("\n--- Training the Model ---\n")
# Train the model
model$fit(X_train, y_train, use_parallel = FALSE)
usethis::use_testthat()
# Define the softmax function globally
softmax <- function(z) {
z_max <- apply(z, 1, max)
exp_z <- exp(z - z_max)
exp_z / rowSums(exp_z)
}
cat("\n--- Training the Model ---\n")
# Train the model
model$fit(X_train, y_train, use_parallel = FALSE)
cat("\n--- Predicting Class Labels ---\n")
# Predict class labels
predictions <- model$predict(X_test)
print(predictions)
cat("\n--- Predicting Class Probabilities ---\n")
# Predict class probabilities
probabilities <- model$predict_proba(X_test)
print(probabilities)
cat("\n--- Evaluating Model ---\n")
# Evaluate the model
evaluation_results <- model$evaluate(X_test, y_test)
print(evaluation_results)
cat("\n--- Variable Importance ---\n")
# Get variable importance
variable_importance <- model$var_importance()
cat("\n--- Variable Selection ---\n")
# Perform variable selection
selected_features <- model$var_select(X_train, y_train, threshold = 0.05)
print(selected_features)
cat("\n--- Visualizing Training Loss ---\n")
# Plot training loss
model$plot_loss()
cat("\n--- Visualizing Variable Importance ---\n")
# Plot variable importance
model$plot_importance()
cat("\n--- Exporting Model to PMML ---\n")
# Export the model to PMML
model$to_pmml(file_path = "mnlmixte_model.pmml")
cat("Model exported successfully to 'mnlmixte_model.pmml'.\n")
cat("\n--- Model Summary ---\n")
# Print model summary
model$summary()
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
source("R/utils.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
View(dependencies)
View(export_to_pmml)
View(prepare_for_prediction)
View(preprocess_data)
source("C:/Users/lcisse/Desktop/mixlogit/tests/testthat/test_mnlmixte.R")
# Load necessary libraries
library(R6)
library(mnlmixte)
# l'aide
?MNLMIXTE
# Load the Iris dataset
data(iris)
# Prepare the data
set.seed(123) # For reproducibility
iris$Target <- as.factor(ifelse(iris$Species == "setosa", "setosa", "other"))
X <- iris[, !(colnames(iris) %in% c("Species", "Target"))]
y <- iris$Target
# Split into training and testing sets
train_idx <- sample(1:nrow(iris), size = 0.7 * nrow(iris))
X_train <- X[train_idx, ]
y_train <- y[train_idx]
X_test <- X[-train_idx, ]
y_test <- y[-train_idx]
# Initialize the MNLMIXTE class
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 200, regularization = 0.01)
cat("\n--- Training the Model ---\n")
# Train the model
model$fit(X_train, y_train, use_parallel = FALSE)
cat("\n--- Predicting Class Labels ---\n")
# Predict class labels
predictions <- model$predict(X_test)
print(predictions)
cat("\n--- Predicting Class Probabilities ---\n")
# Predict class probabilities
probabilities <- model$predict_proba(X_test)
print(probabilities)
cat("\n--- Evaluating Model ---\n")
# Evaluate the model
evaluation_results <- model$evaluate(X_test, y_test)
print(evaluation_results)
cat("\n--- Variable Importance ---\n")
# Get variable importance
variable_importance <- model$var_importance()
print(variable_importance)
cat("\n--- Variable Selection ---\n")
# Perform variable selection
selected_features <- model$var_select(X_train, y_train, threshold = 0.05)
print(selected_features)
cat("\n--- Visualizing Training Loss ---\n")
# Plot training loss
model$plot_loss()
cat("\n--- Visualizing Variable Importance ---\n")
# Plot variable importance
model$plot_importance()
cat("\n--- Exporting Model to PMML ---\n")
# Export the model to PMML
model$to_pmml(file_path = "mnlmixte_model.pmml")
cat("Model exported successfully to 'mnlmixte_model.pmml'.\n")
cat("\n--- Model Summary ---\n")
# Print model summary
model$summary()
# Charger les bibliothèques nécessaires
library(R6)
library(mnlmixte)
# l'aide
?MNLMIXTE
# Charger le jeu de données des étudiants
data(students)
# Préparer les données
set.seed(123) # Pour la reproductibilité
students$Target <- as.factor(students$Target)
X <- students[, !(colnames(students) %in% "Target")]
y <- students$Target
# Diviser en ensembles d'entraînement et de test
train_idx <- sample(1:nrow(students), size = 0.7 * nrow(students))
X_train <- X[train_idx, ]
y_train <- y[train_idx]
X_test <- X[-train_idx, ]
y_test <- y[-train_idx]
# Initialiser la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 200, regularization = 0.01)
cat("\n--- Entraînement du modèle ---\n")
# Entraîner le modèle
model$fit(X_train, y_train, use_parallel = FALSE)
cat("\n--- Prédiction des étiquettes de classe ---\n")
# Prédire les étiquettes de classe
predictions <- model$predict(X_test)
print(predictions)
at("\n--- Prédiction des probabilités de classe ---\n")
cat("\n--- Prédiction des probabilités de classe ---\n")
# Prédire les probabilités de classe
probabilities <- model$predict_proba(X_test)
print(probabilities)
cat("\n--- Évaluation du modèle ---\n")
# Évaluer le modèle
evaluation_results <- model$evaluate(X_test, y_test)
print(evaluation_results)
cat("\n--- Importance des variables ---\n")
# Obtenir l'importance des variables
variable_importance <- model$var_importance()
print(variable_importance)
cat("\n--- Sélection des variables ---\n")
# Effectuer la sélection des variables
selected_features <- model$var_select(X_train, y_train, threshold = 0.05)
print(selected_features)
cat("\n--- Visualisation de la perte d'entraînement ---\n")
# Visualiser la perte d'entraînement
model$plot_loss()
cat("\n--- Visualisation de l'importance des variables ---\n")
# Visualiser l'importance des variables
model$plot_importance()
cat("\n--- Exportation du modèle en PMML ---\n")
# Exporter le modèle en PMML
model$to_pmml(file_path = "mnlmixte_model.pmml")
cat("Modèle exporté avec succès vers 'mnlmixte_model.pmml'.\n")
cat("\n--- Résumé du modèle ---\n")
# Imprimer le résumé du modèle
model$summary()
