X <- students[, !(colnames(students) %in% "Target")]  # Caractéristiques
y <- as.factor(students$Target)  # Cible
# Diviser les données en ensembles d'entraînement et de test (70% train, 30% test)
set.seed(123)  # Pour la reproductibilité
train_indices <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X_train, y_train)
# Vérifier la structure des données
str(X)
str(y)
print(dim(X_train))  # Devrait afficher les dimensions (n, p)
print(length(y_train))  # Devrait afficher n
source("~/.active-rstudio-document")
print(dim(X_train))  # Devrait afficher les dimensions (n, p)
print(length(y_train))  # Devrait afficher n
# Créer une instance de la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X_train, y_train)
source("~/.active-rstudio-document")
# Chargement de votre package
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# 1. Tester la méthode `fit`
cat("Testing the fit function...\n")
model$fit(X_train, y_train)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
if (is.null(X) || is.null(y)) stop("X or y is NULL.")
print(dim(X))  # Should output the dimensions of X (e.g., 100 x 5)
print(length(y))
source("C:/Users/lcisse/Desktop/mixlogit/R/training.R")
source("~/.active-rstudio-document")
str(X)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Make predictions
predictions <- model$predict(X)
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("~/.active-rstudio-document")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
library(mnlmixte)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
View(model)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Targe
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Make predictions
predictions <- model$predict(X)
probabilities <- model$predict_proba(X)
# Evaluate the model
evaluation <- model$evaluate(X, y)
source("~/.active-rstudio-document")
library(mnlmixte)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Make predictions
predictions <- model$predict(X)
probabilities <- model$predict_proba(X)
# Evaluate the model
evaluation <- model$evaluate(X, y)
print(evaluation)
# Plot training loss
model$plot_loss()
# Plot variable importance
model$plot_importance()
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/mnlmixte.R")
source("~/.active-rstudio-document")
library(mnlmixte)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = TRUE)
# Create an instance of the model
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
# Split the data
data(iris)
X <- iris[, -5]  # Features
y <- as.factor(iris$Species)  # Target
# Train the model
model$fit(X, y, variable_selection = FALSE, use_parallel = FALSE)
library(MNLMIXTE)
library(mnlmixte)
# l'aide
?MNLMIXTE
# Load the Iris dataset
data(iris)
# Prepare the data
set.seed(123) # For reproducibility
iris$Target <- as.factor(ifelse(iris$Species == "setosa", "setosa", "other"))
X <- iris[, !(colnames(iris) %in% c("Species", "Target"))]
y <- iris$Target
# Split into training and testing sets
train_idx <- sample(1:nrow(iris), size = 0.7 * nrow(iris))
X_train <- X[train_idx, ]
y_train <- y[train_idx]
X_test <- X[-train_idx, ]
y_test <- y[-train_idx]
# Initialize the MNLMIXTE class
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 200, regularization = 0.01)
cat("\n--- Training the Model ---\n")
# Train the model
model$fit(X_train, y_train, use_parallel = FALSE)
usethis::use_testthat()
# Define the softmax function globally
softmax <- function(z) {
z_max <- apply(z, 1, max)
exp_z <- exp(z - z_max)
exp_z / rowSums(exp_z)
}
cat("\n--- Training the Model ---\n")
# Train the model
model$fit(X_train, y_train, use_parallel = FALSE)
cat("\n--- Predicting Class Labels ---\n")
# Predict class labels
predictions <- model$predict(X_test)
print(predictions)
cat("\n--- Predicting Class Probabilities ---\n")
# Predict class probabilities
probabilities <- model$predict_proba(X_test)
print(probabilities)
cat("\n--- Evaluating Model ---\n")
# Evaluate the model
evaluation_results <- model$evaluate(X_test, y_test)
print(evaluation_results)
cat("\n--- Variable Importance ---\n")
# Get variable importance
variable_importance <- model$var_importance()
cat("\n--- Variable Selection ---\n")
# Perform variable selection
selected_features <- model$var_select(X_train, y_train, threshold = 0.05)
print(selected_features)
cat("\n--- Visualizing Training Loss ---\n")
# Plot training loss
model$plot_loss()
cat("\n--- Visualizing Variable Importance ---\n")
# Plot variable importance
model$plot_importance()
cat("\n--- Exporting Model to PMML ---\n")
# Export the model to PMML
model$to_pmml(file_path = "mnlmixte_model.pmml")
cat("Model exported successfully to 'mnlmixte_model.pmml'.\n")
cat("\n--- Model Summary ---\n")
# Print model summary
model$summary()
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
source("R/utils.R")
source("C:/Users/lcisse/Desktop/mixlogit/R/fit_model.R")
View(dependencies)
View(export_to_pmml)
View(prepare_for_prediction)
View(preprocess_data)
source("C:/Users/lcisse/Desktop/mixlogit/tests/testthat/test_mnlmixte.R")
# Load necessary libraries
library(R6)
library(mnlmixte)
# l'aide
?MNLMIXTE
# Load the Iris dataset
data(iris)
# Prepare the data
set.seed(123) # For reproducibility
iris$Target <- as.factor(ifelse(iris$Species == "setosa", "setosa", "other"))
X <- iris[, !(colnames(iris) %in% c("Species", "Target"))]
y <- iris$Target
# Split into training and testing sets
train_idx <- sample(1:nrow(iris), size = 0.7 * nrow(iris))
X_train <- X[train_idx, ]
y_train <- y[train_idx]
X_test <- X[-train_idx, ]
y_test <- y[-train_idx]
# Initialize the MNLMIXTE class
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 200, regularization = 0.01)
cat("\n--- Training the Model ---\n")
# Train the model
model$fit(X_train, y_train, use_parallel = FALSE)
cat("\n--- Predicting Class Labels ---\n")
# Predict class labels
predictions <- model$predict(X_test)
print(predictions)
cat("\n--- Predicting Class Probabilities ---\n")
# Predict class probabilities
probabilities <- model$predict_proba(X_test)
print(probabilities)
cat("\n--- Evaluating Model ---\n")
# Evaluate the model
evaluation_results <- model$evaluate(X_test, y_test)
print(evaluation_results)
cat("\n--- Variable Importance ---\n")
# Get variable importance
variable_importance <- model$var_importance()
print(variable_importance)
cat("\n--- Variable Selection ---\n")
# Perform variable selection
selected_features <- model$var_select(X_train, y_train, threshold = 0.05)
print(selected_features)
cat("\n--- Visualizing Training Loss ---\n")
# Plot training loss
model$plot_loss()
cat("\n--- Visualizing Variable Importance ---\n")
# Plot variable importance
model$plot_importance()
cat("\n--- Exporting Model to PMML ---\n")
# Export the model to PMML
model$to_pmml(file_path = "mnlmixte_model.pmml")
cat("Model exported successfully to 'mnlmixte_model.pmml'.\n")
cat("\n--- Model Summary ---\n")
# Print model summary
model$summary()
# Charger les bibliothèques nécessaires
library(R6)
library(mnlmixte)
# l'aide
?MNLMIXTE
# Charger le jeu de données des étudiants
data(students)
# Préparer les données
set.seed(123) # Pour la reproductibilité
students$Target <- as.factor(students$Target)
X <- students[, !(colnames(students) %in% "Target")]
y <- students$Target
# Diviser en ensembles d'entraînement et de test
train_idx <- sample(1:nrow(students), size = 0.7 * nrow(students))
X_train <- X[train_idx, ]
y_train <- y[train_idx]
X_test <- X[-train_idx, ]
y_test <- y[-train_idx]
# Initialiser la classe MNLMIXTE
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 200, regularization = 0.01)
cat("\n--- Entraînement du modèle ---\n")
# Entraîner le modèle
model$fit(X_train, y_train, use_parallel = FALSE)
cat("\n--- Prédiction des étiquettes de classe ---\n")
# Prédire les étiquettes de classe
predictions <- model$predict(X_test)
print(predictions)
at("\n--- Prédiction des probabilités de classe ---\n")
cat("\n--- Prédiction des probabilités de classe ---\n")
# Prédire les probabilités de classe
probabilities <- model$predict_proba(X_test)
print(probabilities)
cat("\n--- Évaluation du modèle ---\n")
# Évaluer le modèle
evaluation_results <- model$evaluate(X_test, y_test)
print(evaluation_results)
cat("\n--- Importance des variables ---\n")
# Obtenir l'importance des variables
variable_importance <- model$var_importance()
print(variable_importance)
cat("\n--- Sélection des variables ---\n")
# Effectuer la sélection des variables
selected_features <- model$var_select(X_train, y_train, threshold = 0.05)
print(selected_features)
cat("\n--- Visualisation de la perte d'entraînement ---\n")
# Visualiser la perte d'entraînement
model$plot_loss()
cat("\n--- Visualisation de l'importance des variables ---\n")
# Visualiser l'importance des variables
model$plot_importance()
cat("\n--- Exportation du modèle en PMML ---\n")
# Exporter le modèle en PMML
model$to_pmml(file_path = "mnlmixte_model.pmml")
cat("Modèle exporté avec succès vers 'mnlmixte_model.pmml'.\n")
cat("\n--- Résumé du modèle ---\n")
# Imprimer le résumé du modèle
model$summary()
# chargement du package
library(mnlmixte)
# chargement des données
data("students")
# Séparer les caractéristiques (X) et la variable cible (y)
X <- students[, !(colnames(students) %in% "Target")]  # Exclure la colonne "Target"
y <- as.factor(students$Target)  # La colonne "Target" est la variable cible
# Vérification des dimensions et des classes
cat("Dimensions de X :", dim(X), "\n")
cat("Classes dans y :", levels(y), "\n")
# Diviser les données en ensembles d'entraînement et de test (70% train, 30% test)
set.seed(123)  # Pour la reproductibilité
train_indices <- createDataPartition(y, p = 0.7, list = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# chargement du package
library(mnlmixte)
# chargement des données
data("students")
# Séparer les caractéristiques (X) et la variable cible (y)
X <- students[, !(colnames(students) %in% "Target")]  # Exclure la colonne "Target"
y <- as.factor(students$Target)  # La colonne "Target" est la variable cible
# Vérification des dimensions et des classes
cat("Dimensions de X :", dim(X), "\n")
cat("Classes dans y :", levels(y), "\n")
# Diviser les données en ensembles d'entraînement et de test (70% train, 30% test)
set.seed(123)  # Pour la reproductibilité
train_indices <- createDataPartition(y, p = 0.7, list = FALSE)
# chargement du package
library(mnlmixte)µ
# chargement du package
library(mnlmixte)
library(caret)
# chargement du package
library(mnlmixte)
# Charger les bibliothèques nécessaires
library(R6)
library(FactoMineR)
library(parallel)
library(pmml)
# chargement du package
library(mnlmixte)
# Charger les bibliothèques nécessaires
library(R6)
library(FactoMineR)
library(parallel)
library(caret)
# chargement des données
data("students")
# Séparer les caractéristiques (X) et la variable cible (y)
X <- students[, !(colnames(students) %in% "Target")]  # Exclure la colonne "Target"
y <- as.factor(students$Target)  # La colonne "Target" est la variable cible
# Vérification des dimensions et des classes
cat("Dimensions de X :", dim(X), "\n")
cat("Classes dans y :", levels(y), "\n")
# Diviser les données en ensembles d'entraînement et de test (70% train, 30% test)
set.seed(123)  # Pour la reproductibilité
train_indices <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
# Vérifier la distribution des classes
cat("Distribution des classes dans y_train :\n")
print(table(y_train))
cat("Distribution des classes dans y_test :\n")
print(table(y_test))
# Créer et entraîner le modèle MNLM
cat("Initialisation du modèle MNLM...\n")
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 5000, regularization = 0.01)
cat("Début de l'entraînement...\n")
model$fit(X_train, y_train, variable_selection = TRUE)
cat("Entraînement terminé !\n")
# Tracer la courbe de perte
cat("Tracé de la fonction de perte...\n")
model$plot_loss()
# Résumer le modèle
cat("Résumé du modèle :\n")
model$summary()
# Prédire sur les données de test
cat("Prédiction sur les données de test...\n")
predictions <- model$predict(X_test)
# Obtenir et afficher les probabilités prédites
cat("Probabilités prédites pour les données de test :\n")
probabilities <- model$predict_proba(X_test)
print(head(probabilities))
# Afficher les coefficients
cat("Coefficients du modèle :\n")
print(model$coefficients)
# Évaluer le modèle
cat("Évaluation du modèle...\n")
results <- model$evaluate(X_test, y_test)
# Afficher les résultats de l'évaluation
cat("Resultat de l'evaluation:\n")
print(results, row.names = TRUE)
tinytex::install_tinytex()
print(results, row.names = TRUE)
# calculer le temps d'execution de l'entrainement
# Mesurer le temps d'exécution de l'entraînement
start_time <- Sys.time()
model$fit(X_train, y_train, variable_selection = TRUE)
end_time <- Sys.time()
# Calculer le temps d'exécution
training_time <- end_time - start_time
cat("Temps d'exécution de l'entraînement : ", training_time, " secondes\n")
source("C:/Users/lcisse/Desktop/mnlmixte/mnlmixte/R/evaluate_model.R")
knitr::opts_chunk$set(echo = TRUE)
# chargement du package
library(mnlmixte)
# Charger les bibliothèques nécessaires
library(R6)
library(FactoMineR)
library(parallel)
library(caret)
# chargement des données
data("students")
# Séparer les caractéristiques (X) et la variable cible (y)
X <- students[, !(colnames(students) %in% "Target")]  # Exclure la colonne "Target"
y <- as.factor(students$Target)  # La colonne "Target" est la variable cible
# Vérification des dimensions et des classes
cat("Dimensions de X :", dim(X), "\n")
cat("Classes dans y :", levels(y), "\n")
# Diviser les données en ensembles d'entraînement et de test (70% train, 30% test)
set.seed(123)  # Pour la reproductibilité
train_indices <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
# Vérifier la distribution des classes
cat("Distribution des classes dans y_train :\n")
print(table(y_train))
cat("Distribution des classes dans y_test :\n")
print(table(y_test))
# Créer et entraîner le modèle MNLM
cat("Initialisation du modèle MNLM...\n")
model <- MNLMIXTE$new(learning_rate = 0.01, epochs = 1000, regularization = 0.01)
cat("Début de l'entraînement...\n")
model$fit(X_train, y_train, variable_selection = TRUE)
cat("Entraînement terminé !\n")
# Tracer la courbe de perte
cat("Tracé de la fonction de perte...\n")
model$plot_loss()
# Résumer le modèle
cat("Résumé du modèle :\n")
model$summary()
# Prédire sur les données de test
cat("Prédiction sur les données de test...\n")
predictions <- model$predict(X_test)
# Obtenir et afficher les probabilités prédites
cat("Probabilités prédites pour les données de test :\n")
probabilities <- model$predict_proba(X_test)
print(head(probabilities))
# Afficher l'importance des variables
cat("Importance des variables :\n")
model$plot_importance()
# Afficher les coefficients
cat("Coefficients du modèle :\n")
print(model$coefficients)
# Évaluer le modèle
cat("Évaluation du modèle...\n")
results <- model$evaluate(X_test, y_test)
# Afficher les résultats de l'évaluation
cat("Resultat de l'evaluation:\n")
print(results, row.names = TRUE)
# Afficher les résultats de l'évaluation
cat("Resultat de l'evaluation:\n")
print(results, row.names = TRUE)
# Évaluer le modèle
cat("Évaluation du modèle...\n")
results <- model$evaluate(X_test, y_test)
# Afficher les résultats de l'évaluation
cat("Resultat de l'evaluation:\n")
print(results, row.names = TRUE)
library(devtools)
devtools::install_github("https://github.com/lansanacisse/mnlmixte")
detach("package:mnlmixte")
devtools::install_github("https://github.com/lansanacisse/mnlmixte")
